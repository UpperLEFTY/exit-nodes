/**
 * @param {number[][]} graph
 * @param {number[]} initial
 * @return {number}
 */
const minMalwareSpread = function (graph, initial) {
  const map = new Map(), n = graph.length
  for(let init of initial) {
    const visited = new Set(initial)
    const q = [init]
    while(q.length) {
      const cur = q.pop()
      for(let i = 0; i < n; i++) {
        if(graph[cur][i] === 1 && !visited.has(i)) {
          visited.add(i)
          q.push(i)
          if(map.get(i) == null) map.set(i, [])
          map.get(i).push(init)
        }
      }      
    }
  }
  
  let res = 0, max = -1
  const arr = Array(n)
  for(let [k,v] of map) {
    if(v.length === 1) {
      if(arr[v[0]] == null) arr[v[0]] = 0
      arr[v[0]]++
    }
  }
  
  for(let k = 0; k < n; k++) {
    const v = arr[k]
    if(v > max) {
      max = v
      res = +k
    }
  }
  
  let min = Infinity
  for(let e of initial) {
    if(e < min) min = e
  }
  return max === -1 ? min: res
  
}

